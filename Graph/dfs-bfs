/// adjacency list implementation of Undirected Graph
int main()
{
    int x, y, n, m;
    cin >> n;       //Number of nodes
    cin >> m;       //Number of edges
	vector<int> gp[n];
    for(int i = 0;i < m;++i)
    {
        cin >> x >> y;
        adj[x].push_back(y);        //Insert y in adjacency list of x
    }
    for(int i = 1;i <= n;++i)
    {
        for(int j = 0;j < adj[i].size();++j)
        {
            
        }
    }
    return 0;
}

/// adjacency matrix implementation of Undirected Graph
int main()
{
    int x, y, n, m;
    cin >> n;       //Number of nodes
    cin >> m;       //Number of edges
		bool gp[n+1][n+1];
    for(int i = 0;i < m;++i)
    {
        cin >> x >> y;
        A[x][y] = true;
		}
    for(int i = 1;i <= n;++i)
    {
        for(int j = 0;j < adj[i].size();++j)
        {
            
        }
    }
    return 0;
}

/// DFS 
		//size of nodes = 100001 and t the order in which nodes are traveresed
bool visited[1000001];
vector<int> gp[1000001];
void dfs(int s)
{
    if(visited[s])
        return;
    visited[s]=true;
    for(auto i:gp[s])
    {
        dfs(i);
    }
}
int main()
{
    lli n,m,x;
    cin>>n>>m;
    for(int i=0;i<n+1;++i)
        gp[i].clear();
    lli a,b;
    for(int i=0;i<n+1;++i)
        visited[i]=false;
    fr(i,0,m)
    {
        cin>>a>>b;
        gp[a].pb(b);
        gp[b].pb(a);
    }
    cin>>x;
    vector<int> t;
    dfs(x);
    return 0;
}

\\\ BFS traversal
dist gives distance of every node from the given node

bool visited[1000001];
vector<int> gp[1000001];
int main()
{
    lli n,a,b,x;
    cin>>n;
    fr(i,0,n-1)
    {
        cin>>a>>b;
        gp[a].pb(b);
        gp[b].pb(a);
    }
    cin>>x;
    fr(i,0,n+1)
    	visited[i]=false;
    int dist[n+1];
    queue<int> q;
    int u;
    dist[1]=0;
    visited[1]=true;
    q.push(1);
    while(!q.empty())
    {
        u=q.front();
        q.pop();
        for(auto i:gp[u])
        {
            if(visited[i])
                continue;
            visited[i]=true;
            dist[i]=dist[u]+1;
            q.push(i);
        }
    }
    return 0;
}

