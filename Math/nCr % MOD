//Time Complexity - O(nlog(MOD))

const int N=1e6+1;
lli fac[N];
lli modpow(lli x,lli n)
{
    lli res=1;
    while(n>0)
    {
        if(n&1)
            res=((res%M)*(x%M))%M;
        x=((x%M)*(x%M))%M;
        n>>=1;
    }
    return res;
}
void factorial()
{
    fac[0] = 1;
    for (lli i = 1; i < N; i++)
        fac[i] = (fac[i - 1]%M * (i%M)) % M;
}

lli nCr(lli n,lli r)
{
    // Base case
    lli res = fac[n];
    lli div = fac[n-r] * fac[r];
    div %= M;
    div = modpow(div, M - 2);
    return (res * div) % M;
}

int main()
{
    run;
    lli a,b;
    cin>>a>>b;
    factorial();
    cout<<nCr(a, b)<<endl;
    return 0;
}
