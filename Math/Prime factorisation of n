Time Complexity O(nloglog(n) + O(max(ai))) but space is O(max) so it works only till <=10^7

#define MAXN 1000001
int spf[MAXN];
void sieve()
{
    spf[1] = 1;
    for (int i=2; i<MAXN; i++)
        
        // marking smallest prime factor for every
        // number to be itself.
        spf[i] = i;
    
    // separately marking spf for every even
    // number as 2
    for (int i=4; i<MAXN; i+=2)
        spf[i] = 2;
    
    for (int i=3; i*i<MAXN; i++)
    {
        // checking if i is prime
        if (spf[i] == i)
        {
            // marking SPF for all numbers divisible by i
            for (int j=i*i; j<MAXN; j+=i)
                
                // marking spf[j] if it is not
                // previously marked
                if (spf[j]==j)
                    spf[j] = i;
        }
    }
}

vector<int> getFactorization(int x)
{
    vector<int> ret;
    while (x != 1)
    {
        ret.push_back(spf[x]);
        x = x / spf[x];
    }
    return ret;
}

int main()
{
    sieve();
    lli x;
    cin>>x;
    vector <int> p = getFactorization(x);
    show(p);
    return 0;
}




------------------------------


Time Complexity is O(sqrt(n))

bool isprime[1000001];
vl prime;
void SieveOfEratosthenes(lli n)
{
    
    fr(i,0,n+1)
    {
        isprime[i]=true;
    }
    isprime[0]=isprime[1]=false;
    
    for (lli p=2; p*p<=n; p++)
    {
        // If prime[p] is not changed, then it is a prime
        if (isprime[p] == true)
        {
            for (lli i=p*p; i<=n; i += p)
                isprime[i] = false;
        }
    }
    
    // return all prime numbers
    for (lli p=2; p<=n; p++)
        if (isprime[p])
            prime.pb(p);
}
vector<lli> prime_factor(lli n)
{
    vector<lli> factorization;
    for (lli d : prime)
    {
        if (d * d > n)
            break;
        while (n % d == 0)
        {
            factorization.push_back(d);
            n /= d;
        }
    }
    if (n > 1)
        factorization.push_back(n);
    return factorization;
}
