 [l,r] implementation following--  So choose lower and upper bound respectively       
//No No No Yes Yes Yes type question 

//1. we need to find first yes ( I f function given increasing always use BS) Tip - use proper lower and upper bounds
						
bool check(lli ans)
{
}
lli l=1,h=LONG_LONG_MAX;
while(l<h)
{
    lli  m=l+(h-l)/2;
    if(check(m))
    {
        h=m;
    }
    else
    {
        l=m+1;
    }
}
if(!check(l))
cout<<"All are false"<<endl;
else
cout<<l<<endl;

//2. we need to find first no ( If function given monotonicity always use BS) Tip - use proper lower and upper bounds
						
bool check(lli ans)
{
}
lli l=1,h=LONG_LONG_MAX;
while(l<h)
{
    lli  m=l+(h-l)/2;
    if(check(m))
    {
        h=m-1;
    }
    else
    {
        l=m;
    }
}
if(!check(l))
cout<<"All are true"<<endl;
else
cout<<l<<endl;


//Yes Yes Yes No No Notype question 

//1. we need to find last yes . Tip - use proper lower and upper bounds( case to find max which satisfy)
						
bool check(lli ans)
{
}
lli l=1,h=LONG_LONG_MAX;
while(l<h)
{
    lli  m=l+(h-l)/2;
    if(check(m))
    {
        l=m;
    }
    else
    {
        h=m-1;
    }
}
if(!check(l))
cout<<"All are false"<<endl;
else
cout<<l<<endl;

//2. we need to find first no ( If function given monotonicity always use BS) Tip - use proper lower and upper bounds
						
bool check(lli ans)
{
}
lli l=1,h=LONG_LONG_MAX;
while(l<h)
{
    lli  m=l+(h-l)/2;
    if(check(m))
    {
        l=m+1;
    }
    else
    {
        h=m;
    }
}
if(!check(l))
cout<<"All are true"<<endl;
else
cout<<l<<endl;





//// Binary search for double values --

const float target = 0.0000001;
//value to find
int main()
{
    double l=0.00000000,r=100000.00000000;
    int iterations = 0;
	while(iterations < 300)
	{
        double mid = (float)((l+r)/2);
        if(mid>target) 
			r=mid;
        else 
			l=mid;
		iterations++;
    }
	cout << l;
}
